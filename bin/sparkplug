#!/usr/bin/env python

import simplejson as json
import sys
from argparse import ArgumentParser
import xmltodict
from glob import glob

from sparkplug import SparkPlug
from sparkplug.parsers import xml

def getArgs():

    parser = ArgumentParser()
    
    parser.add_argument("--payload",
                        required=True,
                        type=str,
                        default=None)
    
    parser.add_argument("--url",
                        required=False,
                        type=str,
                        default="http://localhost:8161/api/message/ImportQueue?type=queue")
    
    parser.add_argument("--username",
                        required=False,
                        type=str)
    
    parser.add_argument("--password",
                        required=False,
                        type=str)
    
    parser.add_argument("--isDryrun",
                        required=False,
                        default=False,
                        action='store_true')
    
    parser.add_argument("--compress",
                        required=False,
                        default=False,
                        action='store_true')
    
    parser.add_argument("--save",
                        default=None,
                        required=False,
                        type=str)
    
    args = parser.parse_args()

    return args

def loadMessage(fileName):

    try:

        f = open(fileName, 'r')
        if fileName.endswith("json"):
            message = json.load(f)
        elif fileName.endswith("xml"):
            message = xml.load(f)
            #print(json.dumps(message))
        else:
            raise Exception("Unknown file format: {}".format(fileName))
        f.close()
        
    except Exception as e:
        raise Exception("Provided object in file {} ".format(fileName) +
                        "could not be parsed, reason: {}".format(str(e)))
    
        
    return message

def resolveFileNames(path):

    fileNames = glob(path)

    if len(fileNames) == 0:
        raise Exception("Could not glob anything with: {}".format(path))

    return glob(path)


def main():

    args = getArgs()

    fileNames = resolveFileNames(args.payload)

    for fileName in fileNames:

        message = loadMessage(fileName)
        
        plug = SparkPlug(url=args.url,
                         username=args.username,
                         password=args.password)

        response = plug.post(message, 
                             isDryrun=args.isDryrun, 
                             compress=args.compress)
        
        if args.save is not None:
            f = open(args.save, 'w')
            f.write(dicttoxml(message))
            f.close()
        
        print("{}: {}".format(fileName, response))


if __name__ == "__main__":
    main()
